---
title: "Data Preparation"
format: html
editor: source
---

## Libraries & Setup
```{r}
library(tidyverse)
library(kableExtra)
library(lubridate)
library(broom)
library(purrr)
library(ggrepel)
library(scales)
library(sf)
library(rnaturalearth)
library(viridis)
```

## Load & Prepare Excess Mortality Data (OWID)

Based on the OWID + WMD/HMD sources, many countries report mortality weekly or monthly.
To create comparable annual snapshots for 2020–2023, we use a ±7-day window around **5 May**, keeping the **closest non-NA value**.

Most matched dates fall on `30 April` or `03–07 May`, aligning with ISO Week 18 conventions.

```{r}
# Load OWID dataset
covid_data <- read_csv("data/raw/owid/owid-covid-data.csv")

# Define target snapshot dates and ±7-day tolerance
target_dates <- ymd(c("2020-05-05", "2021-05-05", "2022-05-05", "2023-05-05"))
tolerance <- 7

# Build ±7-day windows for each target date
expanded_dates <- map_dfr(target_dates, function(date) {
  tibble(
    target_date = date,
    date = seq(date - tolerance, date + tolerance, by = "days")
  )
})

owid_snapshots <- covid_data %>%
  select(iso_code, location, date, excess_mortality_cumulative_per_million) %>%
  inner_join(expanded_dates, by = "date") %>%
  filter(!is.na(excess_mortality_cumulative_per_million)) %>%  # filter out NAs early!
  mutate(day_diff = abs(as.integer(date - target_date))) %>%
  group_by(iso_code, location, target_date) %>%
  slice_min(day_diff, with_ties = FALSE) %>%
  ungroup()
```

```{r}
# Sanity Check
owid_snapshots %>%
  count(target_date)

owid_snapshots %>%
  summarise(
    min_date = min(date),
    max_date = max(date)
  )

owid_snapshots %>%
  filter(location %in% c("Germany", "France", "Italy")) %>%
  arrange(location, target_date) %>%
  select(location, target_date, date, day_diff, excess_mortality_cumulative_per_million)


```

To enable a consistent cross-country comparison of cumulative excess mortality per million for the years 2020 to 2023, we defined 5 May as a fixed annual reference date. This date was chosen due to its symbolic significance in many countries as the period around which COVID-19 emergency measures were lifted or reevaluated, and it coincides with ISO Week 18, a recurring reporting point for many datasets.

Since not all countries report mortality data exactly on 5 May, and reporting frequency varies (weekly, biweekly, monthly), we applied a ±7-day window around each year's reference date.
For each country and year, the closest available non-missing value within this window was selected. This ensures temporal consistency while respecting national reporting lags.

The absolute difference in days between the selected date and the reference date (day_diff) was recorded to assess potential deviations in timing and reporting alignment. Most matches were within a range of ±2–3 days, typically falling on dates such as 30 April, 3 May, or 7 May, which aligns well with reporting conventions across the EUROCONTROL zone.


## Load & Filter EUROCONTROL Flight Data

```{r}
flights_2019_12 <- read_csv("data/raw/flight_data/201912/Flights_20191201_20191231.csv.gz")
flights_2020_03 <- read_csv("data/raw/flight_data/202003/Flights_20200301_20200331.csv.gz")

col_subset <- c("ECTRL ID", "ADEP", "ADES", "ADEP Latitude", "ADEP Longitude",
                "ADES Latitude", "ADES Longitude", "ICAO Flight Type",
                "ACTUAL OFF BLOCK TIME", "ACTUAL ARRIVAL TIME")

flights_dec19 <- flights_2019_12 %>%
  select(all_of(col_subset)) %>%
  filter(`ICAO Flight Type` %in% c("S", "N"))

flights_mar20 <- flights_2020_03 %>%
  select(all_of(col_subset)) %>%
  filter(`ICAO Flight Type` %in% c("S", "N"))
```

## Load & Filter Airport Reference Data

```{r}
## Load airport reference table (OurAirports)
airports <- read_csv(
  "data/raw/OurAirports/airports.csv",
  show_col_types = FALSE
) %>%
  select(icao_code, iso_country, name, iata_code = any_of("iata_code"))

## CN / HK / MO airports – origin set
china_hk_macao_airports <- airports %>%
  filter(iso_country %in% c("CN", "HK", "MO"), !is.na(icao_code)) %>%
  pull(icao_code)                               # vector of ICAO codes

## Eurocontrol member airports – destination set
eurocontrol_countries <- read_csv("data/eurocontrol_iso_map.csv",
                                  show_col_types = FALSE) %>%
  pull(iso2)

eurocontrol_airports <- airports %>%
  filter(iso_country %in% eurocontrol_countries, !is.na(icao_code)) %>%
  pull(icao_code)

```

## Subset Flight Data to CN/HK/MO → EUROCONTROL Routes

```{r}
flights_filtered <- bind_rows(
  dec19 = flights_dec19,
  mar20 = flights_mar20,
  .id = "month"
) %>% # month = dec19 / mar20
  filter(
    ADEP %in% china_hk_macao_airports,
    ADES %in% eurocontrol_airports
  )

flights_dec19_filtered <- flights_filtered %>% filter(month == "dec19")
flights_mar20_filtered <- flights_filtered %>% filter(month == "mar20")
```

### Sanity Check: ICAO -> ISO Country -> Mapping

```{r}
check_airports <- function(flights_df, airports_df, iso_map) {

  airport_check <- flights_df %>%
    left_join(airports_df,  by = c("ADES" = "icao_code")) %>%
    select(ADES, iso_country) %>%
    distinct()

  miss  <- airport_check %>% filter(is.na(iso_country))
  wrong <- airport_check %>% filter(!iso_country %in% iso_map$iso2)

  list(missing = miss, unmapped = wrong)
}

iso_map   <- read_csv("data/eurocontrol_iso_map.csv")

dec_check <- check_airports(flights_dec19_filtered, airports, iso_map)
mar_check <- check_airports(flights_mar20_filtered, airports, iso_map)

cat("Dec‑19  missing ICAO→ISO:", nrow(dec_check$missing), "\n")
cat("Dec‑19  unmapped ISO2   :", nrow(dec_check$unmapped), "\n\n")

cat("Mar‑20  missing ICAO→ISO:", nrow(mar_check$missing), "\n")
cat("Mar‑20  unmapped ISO2   :", nrow(mar_check$unmapped), "\n")

```

## Summarize Flight Exposure by Country

```{r}
flights_country <- flights_filtered %>%
  left_join(airports, by = c("ADES" = "icao_code")) %>%
  group_by(month, iso_country) %>%
  summarise(n_flights = n(), .groups = "drop") %>%
  pivot_wider(names_from = month,
              values_from = n_flights,
              names_prefix = "total_inbound_flights_") %>%
  mutate(across(starts_with("total_inbound_flights_"),
                ~replace_na(.x, 0)),
         total_inbound_flights_combined =
           total_inbound_flights_dec19 +
           total_inbound_flights_mar20)
```

## Merge Exposure with ISO Mapping & Mortality Data !!! 

```{r}
euro_map <- read_csv("data/eurocontrol_iso_map.csv",
                     show_col_types = FALSE)

flight_exposure_mapped <- flights_country %>%
  left_join(euro_map, by = c("iso_country" = "iso2"))

## Quick check: any destinations that didn't map to iso3?
unmapped <- flight_exposure_mapped %>% filter(is.na(iso3))
if (nrow(unmapped) > 0) {
  warning("Missing iso3 for: ",
          paste(unmapped$iso_country, collapse = ", "))
}

analysis_df <- flight_exposure_mapped %>%
  left_join(owid_snapshots, by = c("iso3" = "iso_code"))

```

```{r}

owid_countries <- owid_snapshots %>%
  distinct(iso_code) %>%
  arrange(iso_code)

print(owid_countries)
```

### Which Countries Appear in Flight Exposure Data?

```{r}
flight_exposure_countries <- flight_exposure_mapped %>%
  filter(!is.na(iso3)) %>%
  distinct(iso3) %>%
  arrange(iso3)

print(flight_exposure_countries)

```

### Any Duplicates in the Mapped Data?

```{r}
analysis_df %>%
  count(iso3) %>%
  arrange(desc(n))

## Ukraine 2 ! rest 4 
## Ukraine misses 2022, 2023 data .. also questionable for excess mortality. Because of War and Consequences..

euro_map%>%
  count(iso2, iso3) %>%
  filter(n > 1)
# 0 duplicates !
```

```{r}
# Check for missing excess mortality data in 2022, 2023
covid_data %>%
  filter(location == "Ukraine") %>%
  mutate(year = lubridate::year(date)) %>%
  group_by(year) %>%
  summarise(valid_excess_entries = sum(!is.na(excess_mortality_cumulative_per_million)))
```

- Ukraine (iso3 = "UKR") is excluded from the main correlation analysis for two primary reasons:

1. Incomplete Excess Mortality Records
Ukraine's excess mortality data is available for 2020 and 2021, but data for 2022 and 2023 are missing. This gap hinders consistent longitudinal comparisons across the full 2020–2023 timeframe. The absence of data beyond 2021 is attributed to disruptions in civil registration and vital statistics systems, exacerbated by the ongoing conflict. [Source]

2. Confounding Impact of War
The full-scale Russian invasion of Ukraine, which began in February 2022, has significantly disrupted the country's healthcare infrastructure and mortality reporting systems. This makes it challenging to distinguish between COVID-19-related excess deaths and those resulting directly from the conflict. The war has introduced substantial confounding factors that compromise the reliability of excess mortality data for analytical purposes.

Regarding flight data, Ukraine recorded minimal direct flights from China, Hong Kong, and Macao to Eurocontrol countries during December 2019 and March 2020.
While this information remains part of the descriptive statistics and aggregated visualizations, it should be interpreted with caution due to the aforementioned data limitations.

Ukraine will be marked with an asterisk (*) in visualizations to indicate that it is excluded from the correlation analysis due to incomplete excess mortality records and confounding war-related factors.

### Are all iso3 codes present in the flight exposure data?

```{r}
setdiff(analysis_df$iso3, owid_snapshots$iso_code)
```
### Are there any countries in the Eurocontrol mapping that are not in the flight exposure data?

```{r}
expected_iso3 <- euro_map$iso3
actual_iso3 <- flight_exposure_countries$iso3

setdiff(expected_iso3, actual_iso3)

#  [1] "MLT" "CYP" "NOR" "SVN" "ROU" "BGR" "MCO" "MKD" "MDA" "ALB" "BIH" "SRB" "ARM" "MNE" "EST" !
```
```{r}
setdiff(expected_iso3, actual_iso3) %>%
  tibble(iso3 = .) %>%
  left_join(euro_map, by = "iso3")
```

These 15 countries are Eurocontrol members but received no direct flights from CN/HK/MO in the filtered data (Dec 2019 / Mar 2020).

### Case Study: Albania (AL)

```{r}
albanian_airports <- airports %>%
  filter(iso_country == "AL") %>%
  pull(icao_code)

# Check how many flights in Dec 2019 and Mar 2020 had ADES in Albania
flights_to_albania_dec19 <- flights_dec19 %>%
  filter(ADES %in% albanian_airports)

flights_to_albania_mar20 <- flights_mar20 %>%
  filter(ADES %in% albanian_airports)

# Print counts
nrow(flights_to_albania_dec19) # 1130
nrow(flights_to_albania_mar20) # 443

# FROM CN / HK / MO?
flights_to_albania_dec19 %>%
  filter(ADEP %in% china_hk_macao_airports) # 0

flights_to_albania_mar20 %>%
  filter(ADEP %in% china_hk_macao_airports) # 0

```

- Albania (LATI) received 443 flights in total across the two time windows.
- However, none of these flights originated from Mainland China, Hong Kong, or Macao.
- Therefore, Albania is excluded from the final exposure dataset, which only tracks direct CN/HK/MO → EUROCONTROL routes.

### ISO Code Mapping Issue?

```{r}
flights_dec19_filtered %>%
  filter(!ADES %in% airports$icao_code) %>%
  distinct(ADES)
```
- No missing ICAO codes in the filtered data.

## China/HK/Macao Origin Airports — Coverage

### Which of CN/HK/MO Airports Were Actually Used?

```{r}
# Distinct ADEP codes actually used (Dec 19 + Mar 20)
used_adeps_all <- bind_rows(flights_dec19_filtered, flights_mar20_filtered) |>
  distinct(ADEP)

# Simple counts
total_defined_airports <- length(china_hk_macao_airports) # 251
actually_used_airports <- nrow(used_adeps_all) # 26

unused_airports <- setdiff(
  china_hk_macao_airports,
  used_adeps_all$ADEP
)
num_unused <- length(unused_airports) # 225

cat("Defined CN/HK/MO airports :", total_defined_airports, "\n",
    "Actually used as ADEP     :", actually_used_airports, "\n",
    "Never used                :", num_unused, "\n")

# Quick glance at the top origin hubs
top5 <- bind_rows(flights_dec19_filtered, flights_mar20_filtered) |>
  count(ADEP, sort = TRUE) |>
  slice_head(n = 5)

cat("\nTop 5 origin airports account for",
    round(100 * sum(top5$n) /
            nrow(bind_rows(flights_dec19_filtered, flights_mar20_filtered)), 1),
    "% of all direct flights:\n") # 84.7 %
print(top5) 

# Specific Macao check (VMMC)
vmmc_presence <- tibble(
  month = c("Dec‑19", "Mar‑20"),
  has_VMMC = c(any(flights_dec19$ADEP == "VMMC"),
               any(flights_mar20$ADEP == "VMMC"))
)
print(vmmc_presence)
```
- Out of 251 registered airports in Mainland China, Hong Kong, and Macao (as listed in the OurAirports dataset):

- 26 airports were actually used as origin (ADEP) for flights to EUROCONTROL destinations in December 2019 or March 2020.

- 225 airports were never used as origin points in this context.

Although Macau (VMMC) was included in the airport reference, no outbound flights to EUROCONTROL destinations were recorded in the filtered data. A similar pattern holds for the majority of Mainland Chinese airports — only ~25 were actually used as origins (ADEP), aligning with known hub activity (e.g., PEK, PVG, CAN).

"While the total number of direct flights from China/HK/Macao to continental EUROCONTROL member states appears limited, this reflects the nature of transcontinental air travel — where indirect routes via Middle Eastern or Eurasian hubs dominate the corridor. This focused dataset enables an uncluttered view of direct exposure, avoiding confounding rerouting factors...."

## Flight Count by Country & Plot

### Flight Totals by Destination Country

```{r}
plot_data <- flight_exposure_mapped %>%
  select(country_name, total_inbound_flights_dec19, total_inbound_flights_mar20) %>%
  mutate(max_flights = pmax(total_inbound_flights_dec19, total_inbound_flights_mar20)) %>%
  pivot_longer(starts_with("total_inbound_flights"),
               names_to = "month",
               values_to = "flights") %>%
  mutate(month = recode(month,
                        total_inbound_flights_dec19 = "Dec 2019",
                        total_inbound_flights_mar20 = "Mar 2020"))

ggplot(plot_data,
       aes(x = reorder(country_name, max_flights), y = flights, fill = month)) +
  geom_col(position = "dodge") +
  coord_flip() +
  scale_fill_manual(values = c("Dec 2019" = "#636363", "Mar 2020" = "#bdbdbd")) +
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Direct Flights from China / HK / Macao to EUROCONTROL States",
    subtitle = "Comparison of Dec 2019 vs Mar 2020",
    x = NULL, y = "Number of Flights",
    fill = NULL,
    caption = paste("Total direct flights - Dec:", sum(plot_data$flights[plot_data$month == "Dec 2019"]),
                    " | Mar:", sum(plot_data$flights[plot_data$month == "Mar 2020"]))
  ) +
  theme_minimal(base_size = 12) +
  theme(legend.position = "top",
        plot.title.position = "plot")
```

### Türkiye Case Study

```{r}
turk_counts <- bind_rows(
  Dec19 = flights_dec19_filtered,
  Mar20 = flights_mar20_filtered,
  .id = "month"
) %>%
  left_join(airports, by = c("ADES" = "icao_code")) %>%
  filter(iso_country == "TR") %>%
  count(month, ADES, sort = TRUE)

turk_counts
```

- Majority of flights to Türkiye arrived at Istanbul Airport (LTFM).
- Dec 2019: 159 flights → Mar 2020: 15 flights → >90% drop.
- Smaller number to LTBA and LTCG (possible transition phase, charter flights, or redirections).

## Table for China/HK/Macao Airports summarizing Dec 2019 / Mar 2020

```{r}
cn_hk_mo_airports <- airports %>%                             
  filter(iso_country %in% c("CN", "HK", "MO"), !is.na(icao_code)) %>% 
  # keep iata_code only if the column exists
  select(icao_code, name, iso_country,iata_code = any_of("iata_code"))

# flight counts for both months
adep_counts <- bind_rows(
  dec19 = flights_dec19_filtered,
  mar20 = flights_mar20_filtered,
  .id = "month"
) %>%
  count(month, ADEP, name = "flights") %>% # n per month
  pivot_wider(names_from = month, # -> flights_dec19 / flights_mar20
              values_from = flights,
              names_prefix = "flights_",
              values_fill = 0) # 0 for unused

# enrich + order by total
adep_usage <- adep_counts %>%
  mutate(total_flights = flights_dec19 + flights_mar20) %>%
  left_join(cn_hk_mo_airports, by = c("ADEP" = "icao_code")) %>%
  arrange(desc(total_flights))

# quick preview
adep_usage %>%
  filter(total_flights > 0) %>% # hide unused
  select(ADEP, iata_code, name, iso_country,
         flights_dec19, flights_mar20, total_flights) %>%
  glimpse()
```

- Reflects China’s primary international aviation gateways in late 2019 / early 2020.
- Hong Kong's inclusion is notable — both as a major hub and because its special status makes it distinct in reporting.
- Beijing's dual airports (ZBAA and ZBAD) both appear, indicating Daxing was already operational in late 2019. Which had its opening at the end of September 2019. https://www.bbc.com/news/world-asia-china-49750182 
- Many secondary airports (e.g., Haikou, Tianjin) only had 1 or 2 flights, likely charters or niche routes.

## Stacked Bar Plot of Flight Counts

```{r}

adep_usage_clean <- adep_usage %>%
  mutate(name = str_remove(name, " (International )?Airport$"))

plot_df <- adep_usage_clean |>
  arrange(desc(total_flights)) |> 
  mutate(name = fct_reorder(name, total_flights)) |>
  pivot_longer(
    cols = c(flights_dec19, flights_mar20),
    names_to = "month",
    values_to = "flights"
  ) |>
  mutate(month = recode(month,
                        flights_dec19 = "Dec 2019",
                        flights_mar20 = "Mar 2020"))

ggplot(plot_df,
       aes(x = name, y = flights, fill = month)) +
  geom_col(show.legend = TRUE) +
  coord_flip() +
  scale_fill_manual(values = c("Dec 2019" = "#636363",
                               "Mar 2020" = "#bdbdbd")) +
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Direct Flights from China / HK / Macao to EUROCONTROL States",
    subtitle = "Stacked counts per origin airport (Dec 2019 vs Mar 2020)",
    x = NULL, y = "Number of flights",
    fill = NULL,
    caption = "Data: EUROCONTROL ATM dataset| Plot: my analysis"
  ) +
  theme_minimal(base_size = 12) +
  theme(legend.position = "top",
        plot.title.position = "plot")

```

- Although not among the very top flight origins, In December 2019, Wuhan Tianhe (ZHHH) ranked 9th among CN/HK/MO airports for direct flights to EUROCONTROL states; by March 2020, its activity had fallen to zero.

By March 2020, its activity had dropped to zero, illustrating the direct impact of early lockdown measures and international flight bans from the outbreak’s epicenter.

While Wuhan (ZHHH) was the original epicenter of the COVID-19 outbreak, relying solely on Wuhan-origin flights underestimates China's broader role as a highly mobile international hub. Several key studies, such as Zhu & Guo (2021), underscore that:

Air and high-speed rail (HSR) connections with Wuhan increased daily COVID-19 cases in connected cities by 21.2% and 25.4%, respectively [@zhu2021role].

Wuhan’s lockdown only partially offset these effects, reducing cases by 13.3% (air) and 18.6% (HSR), highlighting the lagging impact of suspensions and the momentum of prior spread.

The amplifying effects of mobility were not exclusive to Wuhan. Major air travel nodes such as Shanghai, Beijing, and Hong Kong played critical roles in distributing the virus via pre-lockdown international travel.

These findings validate the approach of this thesis, which includes all airports in Mainland China, Hong Kong, and Macao as potential exposure sources. The rationale:

China's dense domestic transportation network makes it likely that cases exported internationally did not originate directly from Wuhan.

International travel patterns are often routed through major hubs like Shanghai Pudong (ZSPD) or Hong Kong International (VHHH), both of which had substantial outbound flight volumes to EUROCONTROL countries in late 2019.

Hence, the inclusion of CN, HK, and MO ensures that the flight exposure metric captures the true distribution channels of early SARS-CoV-2 exportation — a vital step in correlating air traffic with excess mortality outcomes.




# Correlation-Merging

Goal: Check if inbound flight exposure (Dec 2019, Mar 2020, Combined) is associated with excess mortality across time.

```{r}
keep_countries <- analysis_df %>%
  count(iso3) %>% filter(n == 4) %>% pull(iso3) # keep only countries with all 4 snapshots

correlation_df <- analysis_df %>% filter(iso3 %in% keep_countries)
```

## Compute Spearman Rank Correlation

```{r}
spearman_by_month <- function(colname) {
  correlation_df %>%
    group_by(target_date) %>%
    summarise(
      rho = cor(.data[[colname]],
                excess_mortality_cumulative_per_million,
                method = "spearman",
                use = "complete.obs"),
      p.value = cor.test(.data[[colname]],
                         excess_mortality_cumulative_per_million,
                         method = "spearman",
                         exact = FALSE)$p.value,
      n = sum(!is.na(.data[[colname]]) &
              !is.na(excess_mortality_cumulative_per_million)),
      .groups = "drop"
    ) %>%
    mutate(var = colname)
}

spearman_results <- bind_rows(
  spearman_by_month("total_inbound_flights_dec19"),
  spearman_by_month("total_inbound_flights_mar20"),
  spearman_by_month("total_inbound_flights_combined")
) %>%
  mutate(
    var = recode(var,
      total_inbound_flights_dec19 = "Dec 2019",
      total_inbound_flights_mar20 = "Mar 2020",
      total_inbound_flights_combined = "Combined"),
    year = lubridate::year(target_date)
  ) %>%
  relocate(year, target_date, var)

# quick peek
spearman_results %>%
  select(year, var, rho, p.value, n) %>%
  knitr::kable(digits = 3)

```

## Plot Correlation Results

```{r}
ggplot(spearman_results,
       aes(x = target_date, y = rho, colour = var, group = var)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.4) +
  geom_hline(yintercept = 0, linetype = "dashed", colour = "grey50") +
  scale_x_date(date_labels = "%Y") +
  labs(
    title = "Spearman rank correlation: flight exposure vs excess mortality",
    subtitle = "Point estimate (ρ) at 5 May snapshots — 95 % CI not available for Spearman right now",
    x = NULL, y = "Spearman ρ",
    colour = "Flight window"
  ) +
  theme_minimal(base_size = 13) +
  theme(legend.position = "top",
        plot.title.position = "plot")

```

Spearman rank correlations are shown without confidence intervals (CI).
Analytical CIs are not provided by cor.test() for Spearman; bootstrap CIs are possible but omitted here for simplicity.

Spearman rank correlations between inbound flights and cumulative excess mortality were positive and statistically significant for the first‑wave snapshot (≈ 0.55, p < 0.01), but turned negative from 2021 onward (ρ ≈ –0.45 by 2022). This inversion hints that early‑exposed countries may have accrued partial immunity and/or implemented stricter counter‑measures, dampening later excess‑death burdens. Confidence intervals were not computed for Spearman coefficients;...

## Scatterplot of Correlation Results

```{r}
correlation_df %>%
  filter(target_date == ymd("2020‑05‑05")) %>%              # keeps ±7‑day pick
  ggplot(aes(x = total_inbound_flights_combined,
             y = excess_mortality_cumulative_per_million)) +
  geom_point(size = 3, alpha = .8, colour = "#2b8cbe") +
  geom_text_repel(aes(label = iso3),
                  max.overlaps = 15, size = 3, family = "mono") +
  scale_x_continuous(labels = scales::comma) +
  labs(
    title = "Early flight exposure vs. first-wave excess mortality",
    subtitle = "Combined Dec 2019 + Mar 2020 direct flights - snapshot ≈ 5 May 2020",
    x = "Inbound flights from China / HK / Macao (count)",
    y = "Excess deaths per million (cum. to 5 May 2020)",
    caption = "Spearman ρ = 0.53 (p ≈ 0.007) - Exploratory, non-causal visual"
  ) +
  theme_minimal(base_size = 12) +
  theme(plot.title.position = "plot")

```
The scatter confirms a positive rank‑order pattern in the first wave (Spearman ρ ≈ 0.53). Spain, Italy, and the UK combine high direct exposure with early excess mortality. Germany, however, illustrates that high exposure does not guarantee high mortality, hinting at moderating factors such as ICU capacity and rapid NPIs. These deviations motivate the sensitivity checks in Section ...


TODO FOR TOMORROW! 
- Optimize Chroopleth Prep
- Sankey
- Normalize Exposure by Pop
- Refactor and Export Data 


## Facet Plot of Correlation Results
```{r}
plot_df <- correlation_df %>% 
  filter(!is.na(excess_mortality_cumulative_per_million),
         !is.na(total_inbound_flights_combined)) %>% 
  mutate(label = iso3,
         facet = format(target_date, "%Y"))

plot_facets <- ggplot(plot_df,
       aes(x = total_inbound_flights_combined,
           y = excess_mortality_cumulative_per_million)) +
  geom_point(size = 2.2, colour = "#2b8cbe") +
  geom_text_repel(aes(label = label),
                  max.overlaps = 12, size = 3, family = "mono") +
  facet_wrap(~ facet, nrow = 2) +                      # facet now found
  scale_x_log10(labels = comma_format(accuracy = 1)) +
  scale_y_continuous(labels = comma,
                     expand = expansion(mult = c(.06, .10))) +
  labs(
    title = "Direct flights vs. excess mortality across four pandemic years",
    subtitle = "Combined Dec 2019 + Mar 2020 exposure  •  snapshots ≈ 5 May ± 7 days",
    x = "Inbound flights from China / HK / Macao (log-scale count)",
    y = "Excess deaths per million",
    caption = "Spearman ρ by panel: 2020 → +0.53 | 2021 → –0.31 | 2022 → –0.46 | 2023 → –0.42"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "none",
    plot.title.position = "plot",
    panel.spacing = unit(2, "lines"),
    plot.subtitle = element_text(size = 10),
    plot.caption = element_text(size = 9)
  )

print(plot_facets)

ggsave("scatter_facets.png", plot_facets,
       width = 7, height = 9, dpi = 300)

```

## Sum Table

```{r}
# Extract year and prepare relevant columns
wide_df <- correlation_df %>%
  filter(!is.na(excess_mortality_cumulative_per_million),
         !is.na(total_inbound_flights_combined)) %>%
  mutate(year = year(target_date)) %>%
  select(
    Country = country_name,
    ISO3 = iso3,
    year,
    Total_Flights = total_inbound_flights_combined,
    Excess_Mortality = excess_mortality_cumulative_per_million
  )

wide_table <- wide_df %>%
  pivot_wider(
    names_from = year,
    values_from = c(Total_Flights, Excess_Mortality),
    names_glue = "{str_replace(.value, '_', ' ')} {year}"
  ) %>%
  arrange(desc(`Excess Mortality 2020`)) %>%
  mutate(across(starts_with("Total"), scales::comma))

knitr::kable(wide_table,
             digits = 0,
             caption = "Direct flight exposure and cumulative excess mortality (per M), snapshots ≈ 5 May") %>%
  kableExtra::kable_styling(full_width = FALSE, font_size = 11)

```

Section X (Correlation 2020):

- Direct connectivity explains ≈ 25 % of rank variance in first‑wave mortality (ρ ≈ 0.53). Germany is the key negative outlier, illustrating the moderating role of public‑health response. Despite high-exposure.

Section X (Time‑evolution):

From 2021 onward the sign inverts (ρ ≈ –0.3 to –0.45), reflecting catch‑up mortality in states with initially low exposure.

Discussion:

The wide table underscores that a one‑off flight‑based exposure metric loses predictive power once endogenous factors—vaccine rollout, health‑system resilience—kick in ...

Limitations paragraph:

Eastern‑European spikes suggest that later mobility (tourism, labour flows) and socioeconomic stress dominate cumulative outcomes ?

```{r}
write_csv(wide_table, "data/processed/summary_country_table.csv")
write_csv(spearman_results, "data/processed/spearman_total.csv")
```









# Visualizations - Chapter 4 Descirptive Patterns 

TODO
- Choropleth
- Top 10 inbound countries barplot
- Sankey
- Density of exposure


## Choropleth Map: Active Countries

TODO:
- Shading EUROCONTROL countries based on total inbound flights (Dec + Mar)
- Highlighting countries with 0 flights
- Maybe grey-out Ukraine / annotate excluded countries

```{r}
europe_map <- rnaturalearth::ne_countries(scale = "medium",
                                          type  = "map_units", 
                                          returnclass = "sf") %>%
  mutate(iso2_fix = ifelse(iso_a2 == "-99", iso_a2_eh, iso_a2)) %>%
  filter(iso2_fix %in% eurocontrol_countries) 

exposure_map_df <- flight_exposure_mapped %>%
  mutate(has_flights = total_inbound_flights_combined > 0) %>%
  select(iso3, total_inbound_flights_combined, has_flights)

map_data <- europe_map %>%
  left_join(exposure_map_df, by = c("iso_a3" = "iso3")) %>%
  mutate(plot_fill = replace_na(total_inbound_flights_combined, 0),
         excluded  = iso_a3 == "UKR")

ggplot(map_data) +
  geom_sf(aes(fill = plot_fill), colour = "white", linewidth = 0.2) +
  geom_sf(data = subset(map_data, excluded),
          fill = "grey70", colour = "grey40", linewidth = 0.2,
          alpha = .6, linetype = "33") +
  scale_fill_viridis(
    option  = "plasma",
    trans   = "log10",
    breaks  = c(1, 10, 100, 1000),
    labels  = scales::comma,
    na.value = "lightgrey",
    name    = "Inbound flights\n(log scale)"
  ) +
  labs(
    title    = "Direct flights from China / HK / Macao to Eurocontrol states",
    subtitle = "Combined Dec 2019 + Mar 2020 (log-scale legend)",
    caption  = "Light-grey = zero direct flights · Hatched = Ukraine (data excluded)"
  ) +
  theme_minimal()

```

## Sankey Diagram 

...




## Top 10 inbound barplot

```{r}
top10 <- flights_country %>% 
  slice_max(total_inbound_flights_combined, n = 10) %>%
  pivot_longer(
    cols = c(total_inbound_flights_dec19,
              total_inbound_flights_mar20,
              total_inbound_flights_combined),
    names_to = "month",
    values_to = "flights"
  ) %>%
  mutate(month = recode(month,
    total_inbound_flights_dec19 = "Dec 2019",
    total_inbound_flights_mar20 = "Mar 2020",
    total_inbound_flights_combined = "Combined total"))

ggplot(top10,
       aes(x = reorder(iso_country, flights), y = flights, fill = month)) +
  geom_col(position = position_dodge(width = .8), width = .7) +
  coord_flip() +
  scale_y_continuous(labels = scales::comma) +
  scale_fill_manual(values = c("Dec 2019" = "#4d4d4d",
                               "Mar 2020" = "#bababa",
                               "Combined total" = "#d95f02")) +
  labs(title = "Top-10 Eurocontrol destinations by direct CN/HK/MO flights",
       y = "Flights (count)", x = NULL, fill = NULL) +
  theme_minimal(base_size = 12) +
  theme(legend.position = "top",
        plot.title.position = "plot")
```


