---
title: "Data Preparation"
format: html
editor: source
---

## Libraries & Setup

```{r}
library(tidyverse)
library(lubridate)
library(broom)
library(purrr)
library(ggrepel)
```

## Load & Prepare Excess Mortality Data (OWID)

Based on the OWID + WMD/HMD sources, many countries report mortality weekly or monthly.  
To create comparable annual snapshots for 2020–2023, we use a ±7-day window around **5 May**, keeping the **closest non-NA value**.

Most matched dates fall on `30 April` or `03–07 May`, aligning with ISO Week 18 conventions.  

```{r}
# Load OWID dataset
covid_data <- read_csv("data/raw/owid/owid-covid-data.csv")

# Define target snapshot dates and ±7-day tolerance
target_dates <- ymd(c("2020-05-05", "2021-05-05", "2022-05-05", "2023-05-05"))
tolerance <- 7

# Build ±7-day windows for each target date
expanded_dates <- map_dfr(target_dates, function(date) {
  tibble(
    target_date = date,
    date = seq(date - tolerance, date + tolerance, by = "days")
  )
})

owid_snapshots <- covid_data %>%
  select(iso_code, location, date, excess_mortality_cumulative_per_million) %>%
  inner_join(expanded_dates, by = "date") %>%
  filter(!is.na(excess_mortality_cumulative_per_million)) %>%  # filter out NAs early!
  mutate(day_diff = abs(as.integer(date - target_date))) %>%
  group_by(iso_code, location, target_date) %>%
  slice_min(day_diff, with_ties = FALSE) %>%
  ungroup()
```

```{r}
# Sanity Check
owid_snapshots %>%
  count(target_date)

owid_snapshots %>%
  summarise(
    min_date = min(date),
    max_date = max(date)
  )

owid_snapshots %>%
  filter(location %in% c("Germany", "France", "Italy")) %>%
  arrange(location, target_date) %>%
  select(location, target_date, date, day_diff, excess_mortality_cumulative_per_million)


```





## Load & Filter EUROCONTROL Flight Data

```{r}
flights_2019_12 <- read_csv("data/raw/flight_data/201912/Flights_20191201_20191231.csv.gz")
flights_2020_03 <- read_csv("data/raw/flight_data/202003/Flights_20200301_20200331.csv.gz")

col_subset <- c("ECTRL ID", "ADEP", "ADES", "ADEP Latitude", "ADEP Longitude",
                "ADES Latitude", "ADES Longitude", "ICAO Flight Type",
                "ACTUAL OFF BLOCK TIME", "ACTUAL ARRIVAL TIME")

flights_dec19 <- flights_2019_12 %>%
  select(all_of(col_subset)) %>%
  filter(`ICAO Flight Type` %in% c("S", "N"))

flights_mar20 <- flights_2020_03 %>%
  select(all_of(col_subset)) %>%
  filter(`ICAO Flight Type` %in% c("S", "N"))
```

## Load & Filter Airport Reference Data

```{r}
airports <- read_csv("data/raw/OurAirports/airports.csv")

china_hk_macao_airports <- airports %>%
  filter(iso_country %in% c("CN", "HK", "MO"), !is.na(icao_code)) %>%
  distinct(icao_code)

eurocontrol_countries <- read_csv("data/eurocontrol_iso_map.csv") %>% pull(iso2)

eurocontrol_airports <- airports %>%
  filter(iso_country %in% eurocontrol_countries, !is.na(icao_code)) %>%
  distinct(icao_code)
```

## Subset Flight Data to CN/HK/MO → EUROCONTROL Routes

```{r}
flights_dec19_filtered <- flights_dec19 %>%
  filter(ADEP %in% china_hk_macao_airports$icao_code,
         ADES %in% eurocontrol_airports$icao_code)

flights_mar20_filtered <- flights_mar20 %>%
  filter(ADEP %in% china_hk_macao_airports$icao_code,
         ADES %in% eurocontrol_airports$icao_code)

```

## Sanity Check: ICAO -> ISO Country -> Mapping

```{r}
# Join ADES to airport table
airport_check <- flights_dec19_filtered %>%
  left_join(airports, by = c("ADES" = "icao_code")) %>%
  select(ADES, iso_country) %>%
  distinct()

# Check for missing airport matches
missing_icao_matches <- airport_check %>% filter(is.na(iso_country))
cat("Missing ICAO → iso_country:", nrow(missing_icao_matches), "\n")
print(missing_icao_matches)

# Check for iso_country codes not present in eurocontrol_iso_map
eurocontrol_iso_map <- read_csv("data/eurocontrol_iso_map.csv")
unmapped_iso2 <- airport_check %>%
  filter(!iso_country %in% eurocontrol_iso_map$iso2) %>%
  distinct(iso_country)

cat("Unmapped ISO2 codes:\n")
print(unmapped_iso2)

airport_check <- flights_mar20_filtered %>%
  left_join(airports, by = c("ADES" = "icao_code")) %>%
  select(ADES, iso_country) %>%
  distinct()

missing_icao_matches <- airport_check %>% filter(is.na(iso_country))
cat("Missing ICAO → iso_country:", nrow(missing_icao_matches), "\n")
print(missing_icao_matches)

eurocontrol_iso_map <- read_csv("data/eurocontrol_iso_map.csv")
unmapped_iso2 <- airport_check %>%
  filter(!iso_country %in% eurocontrol_iso_map$iso2) %>%
  distinct(iso_country)

cat("Unmapped ISO2 codes:\n")
print(unmapped_iso2)


```

## Summarize Flight Exposure by Country

```{r}
flights_dec19_country <- flights_dec19_filtered %>%
  left_join(airports, by = c("ADES" = "icao_code")) %>%
  group_by(iso_country) %>%
  summarise(total_inbound_flights_dec19 = n()) %>%
  ungroup()

flights_mar20_country <- flights_mar20_filtered %>%
  left_join(airports, by = c("ADES" = "icao_code")) %>%
  group_by(iso_country) %>%
  summarise(total_inbound_flights_mar20 = n()) %>%
  ungroup()

flight_exposure <- full_join(flights_dec19_country, flights_mar20_country, by = "iso_country") %>%
  mutate(
    total_inbound_flights_dec19 = replace_na(total_inbound_flights_dec19, 0),
    total_inbound_flights_mar20 = replace_na(total_inbound_flights_mar20, 0),
    total_inbound_flights_combined = total_inbound_flights_dec19 + total_inbound_flights_mar20
  )
```

## Merge Exposure with ISO Mapping & Mortality Data !!! 

```{r}
eurocontrol_iso_map <- read_csv("data/eurocontrol_iso_map.csv")
# Merge flight exposure with ISO mapping
flight_exposure_mapped <- flight_exposure %>%
  left_join(eurocontrol_iso_map, by = c("iso_country" = "iso2"))
# Check for missing ISO3 codes
analysis_df <- flight_exposure_mapped %>%
  left_join(owid_snapshots, by = c("iso3" = "iso_code"))

```

## Sanity Checks

```{r}
owid_countries <- owid_snapshots %>%
  distinct(iso_code) %>%
  arrange(iso_code)

print(owid_countries)
```

### Which Countries Appear in Flight Exposure Data?

```{r}
flight_exposure_countries <- flight_exposure_mapped %>%
  filter(!is.na(iso3)) %>%
  distinct(iso3) %>%
  arrange(iso3)

print(flight_exposure_countries)

```

### Any Duplicates in the Mapped Data?

```{r}
analysis_df %>%
  count(iso3) %>%
  arrange(desc(n))

## Ukraine 2 ! rest 4 
## Ukraine misses 2022, 2023 data .. also questionable for excess mortality. Because of War and Consequences..

eurocontrol_iso_map %>%
  count(iso2, iso3) %>%
  filter(n > 1)
# 0 duplicates !


```

```{r}
# Check for missing excess mortality data in 2022, 2023
covid_data %>%
  filter(location == "Ukraine") %>%
  mutate(year = lubridate::year(date)) %>%
  group_by(year) %>%
  summarise(valid_excess_entries = sum(!is.na(excess_mortality_cumulative_per_million)))

```

- Ukraine (iso3 = "UKR") is excluded from the main correlation analysis for two primary reasons:

1. Incomplete Excess Mortality Records
Ukraine's excess mortality data is available for 2020 and 2021, but data for 2022 and 2023 are missing. This gap hinders consistent longitudinal comparisons across the full 2020–2023 timeframe. The absence of data beyond 2021 is attributed to disruptions in civil registration and vital statistics systems, exacerbated by the ongoing conflict. [Source]

2. Confounding Impact of War
The full-scale Russian invasion of Ukraine, which began in February 2022, has significantly disrupted the country's healthcare infrastructure and mortality reporting systems. This makes it challenging to distinguish between COVID-19-related excess deaths and those resulting directly from the conflict. The war has introduced substantial confounding factors that compromise the reliability of excess mortality data for analytical purposes.

Regarding flight data, Ukraine recorded minimal direct flights from China, Hong Kong, and Macao to Eurocontrol countries during December 2019 and March 2020.
While this information remains part of the descriptive statistics and aggregated visualizations, it should be interpreted with caution due to the aforementioned data limitations.

Ukraine will be marked with an asterisk (*) in visualizations to indicate that it is excluded from the correlation analysis due to incomplete excess mortality records and confounding war-related factors.

### Are all iso3 codes present in the flight exposure data?

```{r}
setdiff(analysis_df$iso3, owid_snapshots$iso_code)
```

### Are there any countries in the Eurocontrol mapping that are not in the flight exposure data?

```{r}
expected_iso3 <- eurocontrol_iso_map$iso3
actual_iso3 <- flight_exposure_countries$iso3

setdiff(expected_iso3, actual_iso3)

#  [1] "MLT" "CYP" "NOR" "SVN" "ROU" "BGR" "MCO" "MKD" "MDA" "ALB" "BIH" "SRB" "ARM" "MNE" "EST" !
```
```{r}
setdiff(expected_iso3, actual_iso3) %>%
  tibble(iso3 = .) %>%
  left_join(eurocontrol_iso_map, by = "iso3")
```

These 15 countries are Eurocontrol members but received no direct flights from CN/HK/MO in the filtered data (Dec 2019 / Mar 2020).

### Case Study: Albania (AL)

```{r}
albanian_airports <- airports %>%
  filter(iso_country == "AL") %>%
  pull(icao_code)

# Check how many flights in Dec 2019 and Mar 2020 had ADES in Albania
flights_to_albania_dec19 <- flights_dec19 %>%
  filter(ADES %in% albanian_airports)

flights_to_albania_mar20 <- flights_mar20 %>%
  filter(ADES %in% albanian_airports)

# Print counts
nrow(flights_to_albania_dec19)
nrow(flights_to_albania_mar20)

# Were any of these flights FROM CN / HK / MO?
flights_to_albania_dec19 %>%
  filter(ADEP %in% china_hk_macao_airports$icao_code)

flights_to_albania_mar20 %>%
  filter(ADEP %in% china_hk_macao_airports$icao_code)

```

- Albania (LATI) received 443 flights in total across the two time windows.
- However, none of these flights originated from Mainland China, Hong Kong, or Macao.
- Therefore, Albania is excluded from the final exposure dataset, which only tracks direct CN/HK/MO → EUROCONTROL routes.

### ISO Code Mapping Issue?

```{r}
flights_dec19_filtered %>%
  filter(!ADES %in% airports$icao_code) %>%
  distinct(ADES)
```
- No missing ICAO codes in the filtered data.

## China/HK/Macao Origin Airports — Coverage

### Which of CN/HK/MO Airports Were Actually Used?

```{r}
# Unique ADEP codes used in Dec 2019 & Mar 2020
used_adeps_dec <- flights_dec19_filtered %>% distinct(ADEP)
used_adeps_mar <- flights_mar20_filtered %>% distinct(ADEP)

# Combine and count distinct airports used as ADEP
used_adeps_all <- bind_rows(used_adeps_dec, used_adeps_mar) %>%
  distinct(ADEP)

# Count how many of the total defined CN/HK/MO airports were actually used
total_defined_airports <- nrow(china_hk_macao_airports)
actually_used_airports <- nrow(used_adeps_all)

# How many were never used?
unused_airports <- setdiff(china_hk_macao_airports$icao_code, used_adeps_all$ADEP)
num_unused <- length(unused_airports)

# Output
cat("Defined CN/HK/MO Airports:", total_defined_airports, "\n") # 251
cat("Actually Used as ADEP:", actually_used_airports, "\n") # 26
cat("Never Used as ADEP:", num_unused, "\n") # 225
```
- Out of 251 registered airports in Mainland China, Hong Kong, and Macao (as listed in the OurAirports dataset):

- 26 airports were actually used as origin (ADEP) for flights to EUROCONTROL destinations in December 2019 or March 2020.

- 225 airports were never used as origin points in this context.

### Macao Check VMMC

```{r}
airports %>% filter(icao_code == "VMMC")

any(flights_dec19$ADEP == "VMMC")
any(flights_mar20$ADES == "VMMC")

# Although Macau (VMMC) was included in the airport reference, no outbound flights to EUROCONTROL destinations were recorded in the filtered data. A similar pattern holds for the majority of Mainland Chinese airports — only ~25 were actually used as origins (ADEP), aligning with known hub activity (e.g., PEK, PVG, CAN).

#"While the total number of direct flights from China/HK/Macao to continental EUROCONTROL member states appears limited, this reflects the nature of transcontinental air travel — where indirect routes via Middle Eastern or Eurasian hubs dominate the corridor. This focused dataset enables an uncluttered view of direct exposure, avoiding confounding rerouting factors...."


```
- Although Macao International (VMMC) appears as a destination, it was not used as origin in any commercial flights to Eurocontrol countries. Hence, excluded from exposure.

## Flight Count by Country & Plot

### Flight Totals by Destination Country

```{r}
plot_data <- flight_exposure_mapped %>%
  select(country_name, total_inbound_flights_dec19, total_inbound_flights_mar20) %>%
  pivot_longer(
    cols = starts_with("total_inbound_flights"),
    names_to = "month",
    values_to = "flights"
  ) %>%
  mutate(month = recode(month,
                        "total_inbound_flights_dec19" = "Dec 2019",
                        "total_inbound_flights_mar20" = "Mar 2020"))

ggplot(plot_data, aes(x = reorder(country_name, flights), y = flights, fill = month)) +
  geom_col(position = "dodge") +
  coord_flip() +
  labs(
    title = "Inbound Flights CN/HK/MO -> Eurocontrol Zone",
    subtitle = "EUROCONTROL flight data (Dec 2019 vs Mar 2020)",
    x = "Destination Country",
    y = "Number of Flights",
    fill = "Month"
  ) +
  theme_minimal(base_size = 13)
```

### Türkiye Case Study

```{r}
eurocontrol_iso_map %>% filter(country_name == "Türkiye")  # Should be TR

flights_dec19_filtered %>%
  left_join(airports, by = c("ADES" = "icao_code")) %>%
  filter(iso_country == "TR") %>%
  count(ADES, sort = TRUE)

flights_mar20_filtered %>%
  left_join(airports, by = c("ADES" = "icao_code")) %>%
  filter(iso_country == "TR") %>%
  count(ADES, sort = TRUE)
```
- Majority of flights to Türkiye arrived at Istanbul Airport (LTFM).
- Dec 2019: 159 flights → Mar 2020: 15 flights → >90% drop.
- Smaller number to LTBA and LTCG (possible transition phase, charter flights, or redirections).

## Table for China/HK/Macao Airports summarizing Dec 2019 / Mar 2020

```{r}

# Get airports defined as origin (ADEP) in CN/HK/MO
china_hk_mo_airports <- airports %>%
  filter(iso_country %in% c("CN", "HK", "MO"), !is.na(icao_code)) %>%
  select(icao_code, name, iso_country)

# Count how often each airport was used in Dec 2019
used_dec <- flights_dec19_filtered %>%
  count(ADEP, name = "flights_dec19")

# Count how often each airport was used in Mar 2020
used_mar <- flights_mar20_filtered %>%
  count(ADEP, name = "flights_mar20")

# Merge and fill NAs
adep_usage <- full_join(used_dec, used_mar, by = "ADEP") %>%
  mutate(
    flights_dec19 = replace_na(flights_dec19, 0),
    flights_mar20 = replace_na(flights_mar20, 0),
    total_flights = flights_dec19 + flights_mar20
  ) %>%
  arrange(desc(total_flights)) %>%
  left_join(china_hk_mo_airports, by = c("ADEP" = "icao_code"))

# Preview
print(adep_usage)

# show only used ones
adep_usage %>%
  filter(total_flights > 0) %>%
  select(ADEP, name, iso_country, flights_dec19, flights_mar20, total_flights)

```

- Reflects China’s primary international aviation gateways in late 2019 / early 2020.
- Hong Kong's inclusion is notable — both as a major hub and because its special status makes it distinct in reporting.
- Beijing's dual airports (ZBAA and ZBAD) both appear, indicating Daxing was already operational in late 2019. Which had its opening at the end of September 2019. https://www.bbc.com/news/world-asia-china-49750182 
- Many secondary airports (e.g., Haikou, Tianjin) only had 1 or 2 flights, likely charters or niche routes.

## Stacked Bar Plot of Flight Counts

```{r}
adep_usage_clean <- adep_usage %>%
  mutate(
    name = str_remove(name, " International Airport$"), # bit redundant
    name = str_remove(name, " Airport$")
  )

adep_usage_clean %>%
  filter(total_flights > 0) %>%
  select(name, flights_dec19, flights_mar20) %>%
  pivot_longer(cols = starts_with("flights_"), names_to = "month", values_to = "flights") %>%
  mutate(
    month = recode(month,
                   "flights_dec19" = "Dec 2019",
                   "flights_mar20" = "Mar 2020")
  ) %>%
  ggplot(aes(x = reorder(name, -flights), y = flights, fill = month)) +
  geom_col() +
  coord_flip() +
  labs(
    title = "Direct Flights from CN/HK/MO to EUROCONTROL",
    subtitle = "Flight Counts per Airport by Month (Stacked)",
    x = "Origin Airport",
    y = "Total Flights",
    fill = "Month"
  ) +
  theme_minimal(base_size = 13)


```

- Although not among the very top flight origins, Wuhan Tianhe International Airport (ZHHH) was the 9th most active CN/HK/MO airport sending commercial flights to EUROCONTROL member states in December 2019.
By March 2020, its activity had dropped to zero, illustrating the direct impact of early lockdown measures and international flight bans from the outbreak’s epicenter.

While Wuhan (ZHHH) was the original epicenter of the COVID-19 outbreak, relying solely on Wuhan-origin flights underestimates China's broader role as a highly mobile international hub. Several key studies, such as Zhu & Guo (2021), underscore that:

Air and high-speed rail (HSR) connections with Wuhan increased daily COVID-19 cases in connected cities by 21.2% and 25.4%, respectively [@zhu2021role].

Wuhan’s lockdown only partially offset these effects, reducing cases by 13.3% (air) and 18.6% (HSR), highlighting the lagging impact of suspensions and the momentum of prior spread.

The amplifying effects of mobility were not exclusive to Wuhan. Major air travel nodes such as Shanghai, Beijing, and Hong Kong played critical roles in distributing the virus via pre-lockdown international travel.

These findings validate the approach of this thesis, which includes all airports in Mainland China, Hong Kong, and Macao as potential exposure sources. The rationale:

China's dense domestic transportation network makes it likely that cases exported internationally did not originate directly from Wuhan.

International travel patterns are often routed through major hubs like Shanghai Pudong (ZSPD) or Hong Kong International (VHHH), both of which had substantial outbound flight volumes to EUROCONTROL countries in late 2019.

Hence, the inclusion of CN, HK, and MO ensures that the flight exposure metric captures the true distribution channels of early SARS-CoV-2 exportation — a vital step in correlating air traffic with excess mortality outcomes.

# Correlation-Merging

Goal: Check if inbound flight exposure (Dec 2019, Mar 2020, Combined) is associated with excess mortality across time.

```{r}
# Exclude Ukraine from the analysis (or rather all that have less than 4 data points)
correlation_df <- analysis_df %>%
  group_by(iso3) %>%
  filter(n() == 4) %>%
  ungroup()
```

## Compute Spearman Rank Correlation

```{r}
spearman_by_month <- function(colname) {
  correlation_df %>%
    group_by(target_date) %>%
    summarise(
      test = list(cor.test(.data[[colname]], excess_mortality_cumulative_per_million, method = "spearman", exact = FALSE)),
      n = sum(!is.na(.data[[colname]]) & !is.na(excess_mortality_cumulative_per_million)),
      .groups = "drop"
    ) %>%
    mutate(
      var = colname,
      tidy_result = map(test, broom::tidy)
    ) %>%
    unnest(tidy_result) %>%  # flatten results
    select(target_date, var, n, estimate, p.value) %>%
    rename(rho = estimate)
}

# Run and label
spearman_results_total <- bind_rows(
  spearman_by_month("total_inbound_flights_dec19"),
  spearman_by_month("total_inbound_flights_mar20"),
  spearman_by_month("total_inbound_flights_combined")
) %>%
  mutate(
    var = recode(var,
                 "total_inbound_flights_dec19" = "Dec 2019",
                 "total_inbound_flights_mar20" = "Mar 2020",
                 "total_inbound_flights_combined" = "Combined"),
    year = lubridate::year(target_date)
  ) %>%
  relocate(year)

```

## Plot Correlation Results

```{r}
ggplot(spearman_results_total, aes(x = target_date, y = rho, color = var)) +
  geom_line(size = 1.2) +
  geom_point(size = 2.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +
  scale_x_date(date_labels = "%b %Y") +
  labs(
    title = "Spearman Correlation Over Time",
    subtitle = "Inbound Flights vs. Excess Mortality (May Snapshots)",
    x = "Target Date (5 May each year)",
    y = "Spearman Rank Correlation (ρ)",
    color = "Flight Window"
  ) +
  theme_minimal(base_size = 13)

spearman_results_total <- spearman_results_total %>%
  mutate(year = year(target_date)) %>%
  relocate(year)

```

## Scatterplot of Correlation Results

```{r}
correlation_df %>%
  filter(target_date == as.Date("2020-05-05")) %>%
  ggplot(aes(x = total_inbound_flights_combined, y = excess_mortality_cumulative_per_million)) +
  geom_point(size = 3, alpha = 0.8) +
  geom_text_repel(aes(label = iso3), max.overlaps = 20, size = 3) +
  labs(
    title = "Flight Exposure vs. Excess Mortality",
    subtitle = "Combined Dec 2019 & Mar 2020 Flights | Snapshot: 5 May ±7 days",
    x = "Total Inbound Flights from CN/HK/MO",
    y = "Excess Mortality (per Million)",
    caption = "No regression line shown due to non-causal, rank-based comparison"
  ) +
  theme_minimal(base_size = 13)
```
.. The scatterplot reveals a partial alignment between early flight exposure and excess mortality, especially for countries such as Spain, Italy, and the UK as expected. However, the relationship is not strictly monotonic, as exemplified by Germany, which despite having the highest flight exposure, exhibited comparatively low early excess mortality. These divergences suggest that factors beyond international flight volume — such as healthcare capacity, testing infrastructure, and early containment measures — likely played a pivotal role in shaping early pandemic outcomes.

```{r}
# Filter for only combined flights
plot_df <- correlation_df %>%
  filter(!is.na(excess_mortality_cumulative_per_million),
         !is.na(total_inbound_flights_combined)) %>%
  mutate(label = iso3)

# Create facetted scatterplot for each reference date
ggplot(plot_df, aes(x = total_inbound_flights_combined, 
                    y = excess_mortality_cumulative_per_million)) +
  geom_point() +
  geom_text(aes(label = label), hjust = 1.1, vjust = 0.5, size = 3) +
  facet_wrap(~ target_date, scales = "free") +
  labs(
    title = "Flight Exposure vs. Excess Mortality (per Million)",
    subtitle = "Combined Dec 2019 & Mar 2020 Flights | Snapshot: 5 May ±7 days",
    x = "Total Inbound Flights from CN/HK/MO",
    y = "Excess Mortality (per Million)",
    caption = "No regression line shown due to non-causal, rank-based comparison."
  )
  theme_minimal(base_size = 12)
```

## Sum Table

```{r}
# Extract year and prepare relevant columns
wide_df <- correlation_df %>%
  filter(!is.na(excess_mortality_cumulative_per_million),
         !is.na(total_inbound_flights_combined)) %>%
  mutate(year = year(target_date)) %>%
  select(
    Country = country_name,
    ISO3 = iso3,
    year,
    Total_Flights = total_inbound_flights_combined,
    Excess_Mortality = excess_mortality_cumulative_per_million
  )

# Pivot to wide format
wide_table <- wide_df %>%
  pivot_wider(
    names_from = year,
    values_from = c(Total_Flights, Excess_Mortality),
    names_glue = "{.value}_{year}"
  ) %>%
  arrange(Country)

# View table
print(wide_table, n = 100)

```

```{r}
write_csv(wide_table, "data/processed/summary_country_table.csv")
write_csv(spearman_results_total, "data/processed/correlation_spearman_total.csv")
```

# Visualizations - Chapter 4 Descirptive Patterns 

TODO
- Choropleth
- Top 10 inbound countries barplot
- Sankey
- Density of exposure

## Choropleth Map: Active Countries
TODO:
- Shading EUROCONTROL countries based on total inbound flights (Dec + Mar)
- Highlighting countries with 0 flights
- Maybe grey-out Ukraine / annotate excluded countries

## Sankey Diagram 

