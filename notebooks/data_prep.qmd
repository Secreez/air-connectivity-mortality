---
title: "Data Preparation"
format: html
editor: source
---

## Libraries & Setup

```{r}
library(tidyverse)
library(lubridate)
```

## Load & Prepare Excess Mortality Data (OWID)

Based on the OWID + WMD/HMD sources, many countries report mortality weekly or monthly.  
To create comparable annual snapshots for 2020–2023, we use a ±7-day window around **5 May**, keeping the **closest non-NA value**.

Most matched dates fall on `30 April` or `03–07 May`, aligning with ISO Week 18 conventions.  

```{r}
# Load OWID dataset
covid_data <- read_csv("data/raw/owid/owid-covid-data.csv")

# Define target snapshot dates and ±7-day tolerance
target_dates <- ymd(c("2020-05-05", "2021-05-05", "2022-05-05", "2023-05-05"))
tolerance <- 7

# Build ±7-day windows for each target date
expanded_dates <- map_dfr(target_dates, function(date) {
  tibble(
    target_date = date,
    date = seq(date - tolerance, date + tolerance, by = "days")
  )
})

owid_snapshots <- covid_data %>%
  select(iso_code, location, date, excess_mortality_cumulative_per_million) %>%
  inner_join(expanded_dates, by = "date") %>%
  filter(!is.na(excess_mortality_cumulative_per_million)) %>%  # filter out NAs early!
  mutate(day_diff = abs(as.integer(date - target_date))) %>%
  group_by(iso_code, location, target_date) %>%
  slice_min(day_diff, with_ties = FALSE) %>%
  ungroup()
```

```{r}
# Sanity Check
# Count valid countries per snapshot
owid_snapshots %>% count(target_date)

# Preview: what got matched, and how close
owid_snapshots %>%
  arrange(location, target_date) %>%
  select(location, target_date, date, day_diff, excess_mortality_cumulative_per_million)

# Date range across all selected entries
owid_snapshots %>%
  summarise(min_date = min(date), max_date = max(date))

```

## Load & Filter EUROCONTROL Flight Data

```{r}
flights_2019_12 <- read_csv("data/raw/flight_data/201912/Flights_20191201_20191231.csv.gz")
flights_2020_03 <- read_csv("data/raw/flight_data/202003/Flights_20200301_20200331.csv.gz")

col_subset <- c("ECTRL ID", "ADEP", "ADES", "ADEP Latitude", "ADEP Longitude",
                "ADES Latitude", "ADES Longitude", "ICAO Flight Type",
                "ACTUAL OFF BLOCK TIME", "ACTUAL ARRIVAL TIME")

flights_dec19 <- flights_2019_12 %>%
  select(all_of(col_subset)) %>%
  filter(`ICAO Flight Type` %in% c("S", "N"))

flights_mar20 <- flights_2020_03 %>%
  select(all_of(col_subset)) %>%
  filter(`ICAO Flight Type` %in% c("S", "N"))
```

## Load & Filter Airport Reference Data

```{r}
airports <- read_csv("data/raw/OurAirpots/airports.csv")

china_hk_macao_airports <- airports %>%
  filter(iso_country %in% c("CN", "HK", "MO"), !is.na(icao_code)) %>%
  distinct(icao_code)

eurocontrol_countries <- read_csv("data/eurocontrol_iso_map.csv") %>% pull(iso2)

eurocontrol_airports <- airports %>%
  filter(iso_country %in% eurocontrol_countries, !is.na(icao_code)) %>%
  distinct(icao_code)

```

## Subset Flight Data to CN/HK/MO → EUROCONTROL Routes

```{r}
flights_dec19_filtered <- flights_dec19 %>%
  filter(ADEP %in% china_hk_macao_airports$icao_code,
         ADES %in% eurocontrol_airports$icao_code)

flights_mar20_filtered <- flights_mar20 %>%
  filter(ADEP %in% china_hk_macao_airports$icao_code,
         ADES %in% eurocontrol_airports$icao_code)

```

## Summarize Flight Exposure by Country

```{r}
flights_dec19_country <- flights_dec19_filtered %>%
  left_join(airports, by = c("ADES" = "icao_code")) %>%
  group_by(iso_country) %>%
  summarise(total_inbound_flights_dec19 = n()) %>%
  ungroup()

flights_mar20_country <- flights_mar20_filtered %>%
  left_join(airports, by = c("ADES" = "icao_code")) %>%
  group_by(iso_country) %>%
  summarise(total_inbound_flights_mar20 = n()) %>%
  ungroup()

flight_exposure <- full_join(flights_dec19_country, flights_mar20_country, by = "iso_country") %>%
  mutate(
    total_inbound_flights_dec19 = replace_na(total_inbound_flights_dec19, 0),
    total_inbound_flights_mar20 = replace_na(total_inbound_flights_mar20, 0),
    total_inbound_flights_combined = total_inbound_flights_dec19 + total_inbound_flights_mar20
  )

```

## Merge Exposure with ISO Mapping & Mortality Data

```{r}
eurocontrol_iso_map <- read_csv("data/eurocontrol_iso_map.csv")

flight_exposure_mapped <- flight_exposure %>%
  left_join(eurocontrol_iso_map, by = c("iso_country" = "iso2"))

analysis_df <- flight_exposure_mapped %>%
  left_join(owid_snapshots, by = c("iso3" = "iso_code"))

```


## Sanity Check: Missing Data

```{r}
analysis_df %>%
  filter(is.na(excess_mortality_cumulative_per_million)) %>%
  distinct(iso2, iso3, country_name, date)

```


## Save the Data
```{r}
write_csv(analysis_df, "data/processed/exposure_mortality_2020-23.csv")
```